<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssofun.admin.store.mapper.StoreAdminSqlMapper">

<!-- 상품 하나의 대한 정보가져오기 -->
<select id="selectById" resultType="com.ssofun.dto.ProductDto">
   SELECT p.product_id, p.admin_id, p.name, p.price, p.price_sale, p.contents, p.created_at, t.name as tname,p.used_fg
      FROM tb_product p
      INNER JOIN tb_product_thumbnail t ON p.product_id = t.product_id
   WHERE p.product_id = #{product_id}
</select>

<!-- 모든 상품 리스트불러오기 -->
<!-- <select id="selectAll" resultType="com.ssofun.admin.dto.ProductDto">
		SELECT p.product_id, p.admin_id, p.name, p.price, p.price_sale, p.contents, p.created_at, t.name AS tname, p.used_fg
		FROM tb_product p
		INNER JOIN (
		    SELECT product_id, MIN(name) AS name
		    FROM tb_product_thumbnail
		    GROUP BY product_id
		) AS t ON p.product_id = t.product_id
		ORDER BY tname ASC;
</select> -->

<!-- 카테고리타입리스트 -->
<select id="categoryTypeList" resultType="com.ssofun.dto.ProductCategoryTypeDto">
	select * from tb_product_category_type WHERE node = 2
</select>

<!-- 진행상태리스트 -->
<select id="orderStatusList" resultType="com.ssofun.dto.ProductOrderStatusDto">
	SELECT * FROM tb_product_order_status
</select>

<!-- 모든상품리스트 -->
<select id="selectAll" resultType="com.ssofun.dto.ProductCategoryDto">
	SELECT 
	    pc.product_category_type_id,  
	    pc.product_id,
	    p.admin_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    p.price,
	    p.price_sale,
	    p.contents,
	    p.created_at,
	    t.name AS thumbnail_name
	FROM tb_product_category pc
	INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	INNER JOIN tb_product p ON pc.product_id = p.product_id
	INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	WHERE p.admin_id = 1 AND p.used_fg = 1 
	ORDER BY product_category_type_id,product_id,p.created_at
	LIMIT 0,1000	
</select>

<!-- 상품 등록 -->
<insert id="productInsert">
   INSERT INTO tb_product(admin_id,name,price,price_sale,contents,created_at) 
      VALUES(
         #{admin_id},
         #{name},
         #{price},
         #{price_sale},
         #{contents},
         CURRENT_TIMESTAMP()
         )
</insert>

<!-- 썸네일 등록 -->
<insert id="productThumbnaillInsert">
   INSERT INTO tb_product_thumbnail(product_id,name,order_list) 
      VALUES(
         (SELECT MAX(product_id) FROM tb_product),
         #{name},
         #{order_list}
         )
</insert>

<!-- 카테고리타입등록 -->
<insert id="productcategorytypeInsert">
    INSERT INTO tb_product_category_type(this_parent_id, node, name)
    VALUES (
<!--      <choose>
        <when test="this_parent_id != ''">
            #{this_parent_id}
        </when>
        <otherwis e>
            null
        </otherwise>
    </choose>, -->
    #{this_parent_id},
    #{node},
    #{name}
    )
</insert>

<!-- 카테고리등록 -->
<insert id="productcategoryInsert">
   INSERT INTO tb_product_category(product_category_type_id,product_id)
   VALUES(
         #{product_category_type_id},
         9
      )
</insert>

<!-- 상품상세보기 -->
<select id="productDetail" resultType="com.ssofun.dto.ProductCategoryDto">
	SELECT 
	    pc.product_category_type_id,  
	    pc.product_id,
	    p.admin_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    p.price,
	    p.price_sale,
	    p.contents,
	    p.created_at,
    	p.used_fg AS product_used_fg
	FROM tb_product_category pc
	INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	INNER JOIN tb_product p ON pc.product_id = p.product_id
	INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	WHERE p.product_id = #{product_id} AND p.admin_id = 1 AND p.used_fg = 1
</select>
<select id="productThumbnailDetail" resultType="com.ssofun.dto.ProductThumbnailDto">
	SELECT * FROM tb_product_thumbnail WHERE product_id = #{product_id}
</select>

<!-- 상품수정 -->
<select id="selectByProductId" resultType="com.ssofun.dto.ProductDto">
	SELECT * FROM tb_product WHERE product_id = #{product_id}
</select>
<insert id="productUpdate">
	INSERT INTO tb_product(admin_id,name,price,price_sale,contents,created_at,used_fg) 
		VALUES(
			#{admin_id},
			#{name},
			#{price},
			#{price_sale},
			#{contents},
			CURRENT_TIMESTAMP(),
			1
			)
</insert>
<update id="productUpdateUsedFg">
	UPDATE tb_product 
		SET used_fg = 0
		WHERE product_id = #{product_id}
</update>

<!-- 상품삭제 -->
<update id="productDelete">
	UPDATE tb_product 
		SET used_fg = 0
		WHERE product_id = #{product_id}
</update>
<!-- 썸네일수정 -->
<insert id="productThumbnaillUpdate">
	INSERT INTO tb_product_thumbnail(product_id,name,order_list,created_at,used_fg) 
		VALUES(
			#{product_id},
			#{name},
			#{order_list},
			CURRENT_TIMESTAMP(),
			1
			)
</insert>
<update id="productThumbnaillUpdateUsedFg">
	UPDATE tb_product_thumbnail 
		SET used_fg = 0 
		WHERE product_thumbnail_id = #{product_thumbnail_id}
</update>

<!-- 카테고리 수정 -->
<insert id="productcategoryUpdate">
   INSERT INTO tb_product_category(product_category_type_id,product_id)
   VALUES(
         #{product_category_type_id},
         #{product_id}
      )
</insert>

<!-- 주문아이템등록 -->
<insert id="productOrderItemInsert">
	INSERT INTO tb_product_order_item(product_order_id,product_id,product_order_status_id,delivery_recipient_id,count,created_at,used_fg) 
		VALUES(
				#{product_order_id},
				#{product_id},
				#{product_order_status_id},
				#{delivery_recipient_id},
				#{count},
				CURRENT_TIMESTAMP(),
				1
			)
</insert>

<!-- N번 관리자가 판매하는 모든상품의 주문내역 -->
<select id="productOrderItemList" resultType="com.ssofun.dto.ProductOrderItemDto">
	SELECT 
		poi.product_order_item_id,
	    poi.created_at,
	    dr.name AS recipient_name,
		pos.name AS order_status_name,
	    p.name AS product_name,
	    poi.count,
	    p.price
	FROM tb_product_order_item poi
		INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
		INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	    INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	    INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	WHERE a.admin_id = 1
	ORDER BY poi.created_at DESC
</select>
<!-- N번 관리자가 판매하는 상품중 하나의 상품 상세보기 -->
<select id="orderItemDetail" resultType="com.ssofun.dto.ProductOrderItemDto">
	SELECT 
		poi.product_order_item_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    t.name AS thumbnail_name,
	    p.price,
	    poi.count,   
	    pos.name AS order_status_name,
	    poi.created_at,
	    poi.delivery_recipient_id,
	    poi.product_order_status_id,
		dr.name AS recipient_name,
	    dr.address_post,
	    dr.address_default,
	    dr.address_detail,
	    dr.request_message
	FROM tb_product_order_item poi
		INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
		INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	    INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	    INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	WHERE a.admin_id = 1 AND product_order_item_id = #{product_order_item_id}
	ORDER BY poi.created_at DESC
</select>

<!-- 진행상태수정 -->
<!-- 판매자확인완료 -->
<update id="adminCheckUpdate">
	UPDATE tb_product_order_item SET product_order_status_id = 4
	WHERE product_order_item_id = #{product_order_item_id}
</update>

<!-- 택배사입력 -->
<insert id="deliveryInsert">
	INSERT INTO tb_delivery(delivery_company_id,delivery_recipient_id,invoice_no,created_at,used_fg) 
	VALUES(
			#{delivery_company_id},
			#{delivery_recipient_id},
			#{invoice_no},
			CURRENT_TIMESTAMP(),
			1
		)
</insert>

<!--카테고리별 오더리스트 -->	
<select id="orderItemCategoryList" resultType="com.ssofun.dto.ProductOrderItemDto">
	SELECT 
		poi.product_order_item_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    t.name AS thumbnail_name,
	    p.price,
	    poi.count,   
	    pos.name AS order_status_name,
	    poi.created_at,
		dr.name AS recipient_name,
	    dr.address_post,
	    dr.address_default,
	    dr.address_detail,
	    dr.request_message
	FROM tb_product_order_item poi
		INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
		INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	    INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	    INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	WHERE a.admin_id = 1 AND pos.product_order_status_id = #{product_order_status_id}
	ORDER BY poi.created_at DESC
</select>

<!-- 배송중수정 -->
<update id="deliveryingUpdate">
	UPDATE tb_product_order_item SET product_order_status_id = 5 
	WHERE product_order_item_id = #{product_order_item_id}
</update>
</mapper>